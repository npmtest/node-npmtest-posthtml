{"/home/travis/build/npmtest/node-npmtest-posthtml/test.js":"/* istanbul instrument in package npmtest_posthtml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-posthtml/lib.npmtest_posthtml.js":"/* istanbul instrument in package npmtest_posthtml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_posthtml = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_posthtml = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-posthtml/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-posthtml && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_posthtml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_posthtml\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_posthtml.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_posthtml.rollup.js'] =\n            local.assetsDict['/assets.npmtest_posthtml.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_posthtml.__dirname + '/lib.npmtest_posthtml.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-posthtml/node_modules/posthtml/lib/index.js":"var pkg = require('../package.json')\nvar api = require('./api.js')\n\nvar parser = require('posthtml-parser')\nvar render = require('posthtml-render')\n\n/**\n * @author Ivan Voischev (@voischev),\n *         Anton Winogradov (@awinogradov),\n *         Alexej Yaroshevich (@zxqfox),\n *         Vasiliy (@Yeti-or)\n *\n * @requires api\n * @requires posthtml-parser\n * @requires posthtml-render\n *\n * @constructor PostHTML\n * @param {Array} plugins - An array of PostHTML plugins\n */\nfunction PostHTML (plugins) {\n/**\n * PostHTML Instance\n *\n * @prop plugins\n * @prop options\n */\n  this.version = pkg.version\n  this.name = pkg.name\n  this.plugins = typeof plugins === 'function' ? [plugins] : plugins || []\n}\n\n/**\n * @requires posthtml-parser\n *\n * @param   {String} html - Input (HTML)\n * @returns {Array}  tree - PostHTMLTree (JSON)\n */\nPostHTML.parser = parser\n/**\n * @requires posthtml-render\n *\n * @param   {Array}  tree - PostHTMLTree (JSON)\n * @returns {String} html - HTML\n */\nPostHTML.render = render\n\n/**\n* @this posthtml\n* @param   {Function} plugin - A PostHTML plugin\n* @returns {Constructor} - this(PostHTML)\n*\n* **Usage**\n* ```js\n* ph.use((tree) => { tag: 'div', content: tree })\n*   .process('<html>..</html>', {})\n*   .then((result) => result))\n* ```\n*/\nPostHTML.prototype.use = function () {\n  [].push.apply(this.plugins, arguments)\n  return this\n}\n\n/**\n * @param   {String} html - Input (HTML)\n * @param   {?Object} options - PostHTML Options\n * @returns {Object<{html: String, tree: PostHTMLTree}>} - Sync Mode\n * @returns {Promise<{html: String, tree: PostHTMLTree}>} - Async Mode (default)\n *\n * **Usage**\n *\n * **Sync**\n * ```js\n * ph.process('<html>..</html>', { sync: true }).html\n * ```\n *\n * **Async**\n * ```js\n * ph.process('<html>..</html>', {}).then((result) => result))\n * ```\n */\nPostHTML.prototype.process = function (tree, options) {\n  /**\n   * ## PostHTML Options\n   *\n   * @type {Object}\n   * @prop {?Boolean} options.sync - enables sync mode, plugins will run synchronously, throws an error when used with async plugins\n   * @prop {?Function} options.parser - use custom parser, replaces default (posthtml-parser)\n   * @prop {?Function} options.render - use custom render, replaces default (posthtml-render)\n   * @prop {?Boolean} options.skipParse - disable parsing\n   */\n  options = options || {}\n\n  if (options.parser) parser = options.parser\n  if (options.render) render = options.render\n\n  tree = options.skipParse ? tree : parser(tree)\n\n  tree.options = options\n  tree.processor = this\n\n  // sync mode\n  if (options.sync === true) {\n    this.plugins.forEach(function (plugin) {\n      apiExtend(tree)\n\n      var result\n\n      if (plugin.length === 2 || isPromise(result = plugin(tree))) {\n        throw new Error(\n          'Can’t process contents in sync mode because of async plugin: ' + plugin.name\n        )\n      }\n      // return the previous tree unless result is fulfilled\n      tree = result || tree\n    })\n\n    return lazyResult(render, tree)\n  }\n\n  // async mode\n  var i = 0\n\n  var next = function (result, cb) {\n    // all plugins called\n    if (this.plugins.length <= i) {\n      cb(null, result)\n      return\n    }\n\n    // little helper to go to the next iteration\n    function _next (res) {\n      return next(res || result, cb)\n    }\n\n    // (re)extend the object\n    apiExtend(result)\n\n    // call next\n    var plugin = this.plugins[i++]\n\n    if (plugin.length === 2) {\n      plugin(result, function (err, res) {\n        if (err) return cb(err)\n        _next(res)\n      })\n      return\n    }\n\n    // sync and promised plugins\n    var err = null\n\n    var res = tryCatch(function () {\n      return plugin(result)\n    }, function (err) {\n      return err\n    })\n\n    if (err) {\n      cb(err)\n      return\n    }\n\n    if (isPromise(res)) {\n      res.then(_next).catch(cb)\n      return\n    }\n\n    _next(res)\n  }.bind(this)\n\n  return new Promise(function (resolve, reject) {\n    next(tree, function (err, tree) {\n      if (err) reject(err)\n      else resolve(lazyResult(render, tree))\n    })\n  })\n}\n\n/**\n * @exports posthtml\n *\n * @param  {Array} plugins\n * @return {Function} posthtml\n *\n * **Usage**\n * ```js\n * import posthtml from 'posthtml'\n * import plugin from 'posthtml-plugin'\n *\n * const ph = posthtml([ plugin() ])\n * ```\n */\nmodule.exports = function (plugins) {\n  return new PostHTML(plugins)\n}\n\n/**\n * Checks if parameter is a Promise (or thenable) object.\n *\n * @private\n *\n * @param   {*} promise - Target `{}` to test\n * @returns {Boolean}\n */\nfunction isPromise (promise) {\n  return !!promise && typeof promise.then === 'function'\n}\n\n/**\n * Simple try/catch helper, if exists, returns result\n *\n * @private\n *\n * @param   {Function} tryFn - try block\n * @param   {Function} catchFn - catch block\n * @returns {?*}\n */\nfunction tryCatch (tryFn, catchFn) {\n  try {\n    return tryFn()\n  } catch (err) {\n    catchFn(err)\n  }\n}\n\n/**\n * Extends the PostHTMLTree with the Tree API\n *\n * @private\n *\n * @param   {Array} tree - PostHTMLTree\n * @returns {Array} tree - PostHTMLTree with API\n */\nfunction apiExtend (tree) {\n  tree.walk = api.walk\n  tree.match = api.match\n}\n\n/**\n * Wraps the PostHTMLTree within an object using a getter to render HTML on demand.\n *\n * @private\n *\n * @param   {Function} render\n * @param   {Array}    tree\n * @returns {Object<{html: String, tree: Array}>}\n */\nfunction lazyResult (render, tree) {\n  return {\n    get html () {\n      return render(tree, tree.options)\n    },\n    tree: tree\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-posthtml/node_modules/posthtml/lib/api.js":"'use strict'\n/**\n * # API\n * @author Ivan Voischev (@voischev),\n *         Anton Winogradov (@awinogradov),\n *         Alexej Yaroshevich (@zxqfox),\n *         Vasiliy (@Yeti-or)\n * @module API\n * @namespace tree\n */\nmodule.exports = {\n  /**\n   * walk the tree and pass all nodes to callback\n   *\n   * @memberof tree\n   * @param  {Function} cb - Callback\n   * @return {Function}    - Node in callback\n   *\n   ***Usage**\n   * ```js\n   * export const walk = (tree) => {\n   *   tree.walk((node) => {\n   *     let classes = node.attrs && node.attrs.class.split(' ') || []\n   *\n   *     if (classes.includes(className)) return cb(node)\n   *       return node\n   *   })\n   * }\n   * ```\n   */\n  walk: function (cb) {\n    return traverse(this, cb)\n  },\n  /**\n   * match expression to search nodes in the tree\n   *\n   * @memberof tree\n   * @param  {String|RegExp|Object|Array} expression - Matcher(s) to search\n   * @param  {Function} cb - Callback\n   * @return {Function}    - Node in callback\n   *\n   ***Usage**\n   * ```js\n   * export const match = (tree) => {\n   *   // Single matcher\n   *   tree.match({ tag: 'custom-tag' }, (node) => {\n   *     let tag = node.tag\n   *\n   *     Object.assign(node, { tag: 'div', attrs: {class: tag} })\n   *\n   *     return node\n   *   })\n   *   // Multiple matchers\n   *   tree.match([{ tag: 'b' }, { tag: 'strong' }], (node) => {\n   *     let style = 'font-weight: bold;'\n   *\n   *     node.tag = 'span'\n   *\n   *     node.attrs\n   *       ? ( node.attrs.style\n   *         ? ( node.attrs.style += style )\n   *         : node.attrs.style = style\n   *       )\n   *       : node.attrs = { style: style }\n   *\n   *     return node\n   *   })\n   * }\n   * ```\n   */\n  match: function (expression, cb) {\n    return Array.isArray(expression)\n      ? traverse(this, function (node) {\n        for (var i = 0; i < expression.length; i++) {\n          if (compare(expression[i], node)) return cb(node)\n        }\n\n        return node\n      })\n      : traverse(this, function (node) {\n        if (compare(expression, node)) return cb(node)\n\n        return node\n      })\n  }\n}\n\n/** @private */\nfunction traverse (tree, cb) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      tree[i] = traverse(cb(tree[i]), cb)\n    }\n  } else if (\n      tree &&\n      typeof tree === 'object' &&\n      tree.hasOwnProperty('content')\n  ) traverse(tree.content, cb)\n\n  return tree\n}\n\n/** @private */\nfunction compare (expected, actual) {\n  if (expected instanceof RegExp) {\n    if (typeof actual === 'object') return false\n    if (typeof actual === 'string') return expected.test(actual)\n  }\n\n  if (typeof expected !== typeof actual) return false\n  if (typeof expected !== 'object' || expected === null) {\n    return expected === actual\n  }\n\n  if (Array.isArray(expected)) {\n    return expected.every(function (exp) {\n      return [].some.call(actual, function (act) {\n        return compare(exp, act)\n      })\n    })\n  }\n\n  return Object.keys(expected).every(function (key) {\n    var ao = actual[key]\n    var eo = expected[key]\n\n    if (typeof eo === 'object' && eo !== null && ao !== null) {\n      return compare(eo, ao)\n    }\n    if (typeof eo === 'boolean') {\n      return eo !== (ao == null)\n    }\n\n    return ao === eo\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-posthtml/node_modules/posthtml-parser/index.js":"'use strict';\n\nvar htmlparser = require('htmlparser2');\nvar isObject = require('isobject');\n\n/**\n * @see https://github.com/fb55/htmlparser2/wiki/Parser-options\n */\nvar defaultOptions = {lowerCaseTags: false, lowerCaseAttributeNames: false};\n\n/**\n * Parse html to PostHTMLTree\n * @param  {String} html\n * @param  {Object} [options=defaultOptions]\n * @return {PostHTMLTree}\n */\nfunction postHTMLParser(html, options) {\n    var bufArray = [],\n        results = [];\n\n    bufArray.last = function() {\n        return this[this.length - 1];\n    };\n\n    var parser = new htmlparser.Parser({\n        onprocessinginstruction: function(name, data) {\n            if (name.toLowerCase() === '!doctype') {\n                results.push('<' + data + '>');\n            }\n        },\n        oncomment: function(data) {\n            var comment = '<!--' + data + '-->',\n                last = bufArray.last();\n\n            if (!last) {\n                results.push(comment);\n                return;\n            }\n\n            last.content || (last.content = []);\n            last.content.push(comment);\n        },\n        onopentag: function(tag, attrs) {\n            var buf = { tag: tag };\n\n            if (Object.keys(attrs).length) {\n                buf.attrs = attrs;\n            }\n\n            bufArray.push(buf);\n        },\n        onclosetag: function() {\n            var buf = bufArray.pop();\n\n            if (!bufArray.length) {\n                results.push(buf);\n                return;\n            }\n\n            var last = bufArray.last();\n            if (!Array.isArray(last.content)) {\n                last.content = [];\n            }\n\n            last.content.push(buf);\n        },\n        ontext: function(text) {\n            var last = bufArray.last();\n            if (!last) {\n                results.push(text);\n                return;\n            }\n\n            last.content || (last.content = []);\n            last.content.push(text);\n        }\n    }, options || defaultOptions);\n\n    parser.write(html);\n    parser.end();\n\n    return results;\n}\n\nfunction parserWrapper() {\n    var option;\n\n    function parser(html) {\n        var opt = option || defaultOptions;\n        return postHTMLParser(html, opt);\n    }\n\n    if (arguments.length === 1 && isObject(arguments[0])) {\n        option = arguments[0];\n        return parser;\n    }\n\n    option = arguments[1];\n    return parser(arguments[0]);\n}\n\nmodule.exports = parserWrapper;\nmodule.exports.defaultOptions = defaultOptions;\n","/home/travis/build/npmtest/node-npmtest-posthtml/node_modules/posthtml-render/lib/posthtml-render.js":"(function(global) {\n/**\n * Parse PostHTMLTree to html\n * @param  {Object} tree    PostHTMLTree\n * @param  {Object} options Parse options\n * @return {String}         html string\n */\nfunction postHTMLRender(tree, options) {\n    options = options || {};\n\n    /**\n     * options parse\n     * @param {Array}  singleTags           single tags array for extend default\n     * @param {String} closingSingleTag     option for closing single tag\n     *                                      Option:\n     *                                          default: `<br>`\n     *                                          slash: `<br />`\n     *                                          tag: `<br></br>`\n     *\n     */\n\n    var optSingleTags = options.singleTags,\n        closingSingleTag = options.closingSingleTag;\n\n    var SINGLE_TAGS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen',\n                        'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\n    var singleTags = {};\n\n    for (var i = 0, leni = SINGLE_TAGS.length; i < leni; i++) {\n        singleTags[SINGLE_TAGS[i]] = 1;\n    }\n\n    if (optSingleTags) {\n        for (var j = 0, lenj = optSingleTags.length; j < lenj; j++) {\n            singleTags[optSingleTags[j]] = 1;\n        }\n    }\n\n    return html(tree);\n\n    function html(tree) {\n\n        var buf = '';\n\n        traverse([].concat(tree), function(node) {\n            if (!node) return;\n            if (typeof node === 'string' || typeof node === 'number') {\n                buf += node;\n                return;\n            }\n            if (typeof node.tag === 'boolean' && !node.tag) {\n                typeof node.content !== 'object' &&  (buf += node.content);\n                return node.content;\n            }\n\n            // treat as new root tree if node is an array\n            if (Array.isArray(node)) {\n                buf += html(node);\n                return;\n            }\n\n            var tag = node.tag || 'div';\n            if (singleTags[tag]) {\n                buf += '<'+ tag + attrs(node.attrs);\n                switch (closingSingleTag) {\n                    case 'slash':\n                        buf += ' />';\n                        break;\n                    case 'tag':\n                        buf += '></' + tag + '>';\n                        break;\n                    default:\n                        buf += '>';\n                }\n            } else {\n                buf += '<' + tag + (node.attrs? attrs(node.attrs): '') + '>' +\n                    (node.content? html(node.content): '') +\n                    '</' + tag + '>';\n            }\n        });\n\n        return buf;\n\n        function attrs(obj) {\n            var attr = '';\n            for (var key in obj) {\n                if (\n                    typeof obj[key] === 'boolean' &&\n                    obj[key]\n                ) attr += ' ' + key;\n                else if (\n                    typeof obj[key] === 'string' ||\n                    typeof obj[key] === 'number'\n                ) attr += ' ' + key + '=\"' + obj[key] + '\"';\n            }\n            return attr;\n        }\n    }\n}\n\nfunction traverse(tree, cb) {\n    if (Array.isArray(tree)) {\n        for (var i = 0, len = tree.length; i < len; i++) {\n            traverse(cb(tree[i]), cb);\n        }\n    } else if (typeof tree === 'object' && tree.hasOwnProperty('content')) traverse(tree.content, cb);\n    return tree;\n}\n\nvar defineAsGlobal = true;\n\n/* istanbul ignore next */\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = postHTMLRender;\n    defineAsGlobal = false;\n}\n\n/* istanbul ignore next */\nif (typeof modules === 'object' && typeof modules.define === 'function') {\n    modules.define('postHTMLRender', function(provide) {\n        provide(postHTMLRender);\n    });\n    defineAsGlobal = false;\n}\n\n/* istanbul ignore next */\nif (typeof define === 'function') {\n    define(function(require, exports, module) {\n        module.exports = postHTMLRender;\n    });\n    defineAsGlobal = false;\n}\n/* istanbul ignore next */\ndefineAsGlobal && (global.postHTMLRender = postHTMLRender);\n\n/* istanbul ignore next */\n})(typeof window !== 'undefined'? window: global);\n"}